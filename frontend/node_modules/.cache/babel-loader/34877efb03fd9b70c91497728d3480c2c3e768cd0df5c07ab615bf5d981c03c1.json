{"ast":null,"code":"'use client';\n\nimport _objectWithoutProperties from \"C:/achados-perdidos/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/achados-perdidos/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionKey\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"renderValue\", \"selectOnFocus\", \"size\", \"slots\", \"slotProps\", \"value\"],\n  _excluded2 = [\"ref\"],\n  _excluded3 = [\"key\"],\n  _excluded4 = [\"key\"];\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport integerPropType from '@mui/utils/integerPropType';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\nimport Popper from \"../Popper/index.js\";\nimport ListSubheader from \"../ListSubheader/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport IconButton from \"../IconButton/index.js\";\nimport Chip from \"../Chip/index.js\";\nimport inputClasses from \"../Input/inputClasses.js\";\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', \"tagSize\".concat(capitalize(size))],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [\"& .\".concat(autocompleteClasses.tag)]: styles.tag\n    }, {\n      [\"& .\".concat(autocompleteClasses.tag)]: styles[\"tagSize\".concat(capitalize(size))]\n    }, {\n      [\"& .\".concat(autocompleteClasses.inputRoot)]: styles.inputRoot\n    }, {\n      [\"& .\".concat(autocompleteClasses.input)]: styles.input\n    }, {\n      [\"& .\".concat(autocompleteClasses.input)]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})({\n  [\"&.\".concat(autocompleteClasses.focused, \" .\").concat(autocompleteClasses.clearIndicator)]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [\"&:hover .\".concat(autocompleteClasses.clearIndicator)]: {\n      visibility: 'visible'\n    }\n  },\n  [\"& .\".concat(autocompleteClasses.tag)]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n  [\"& .\".concat(autocompleteClasses.inputRoot)]: {\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \"&, .\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 26 + 4\n    },\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \".\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 52 + 4\n    },\n    [\"& .\".concat(autocompleteClasses.input)]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [\"& .\".concat(inputClasses.root)]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [\"& .\".concat(inputClasses.root, \".\").concat(inputBaseClasses.sizeSmall)]: {\n    [\"& .\".concat(inputClasses.input)]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [\"& .\".concat(outlinedInputClasses.root)]: {\n    padding: 9,\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \"&, .\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \".\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [\"& .\".concat(autocompleteClasses.input)]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [\"& .\".concat(autocompleteClasses.endAdornment)]: {\n      right: 9\n    }\n  },\n  [\"& .\".concat(outlinedInputClasses.root, \".\").concat(inputBaseClasses.sizeSmall)]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [\"& .\".concat(autocompleteClasses.input)]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [\"& .\".concat(filledInputClasses.root)]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \"&, .\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [\".\".concat(autocompleteClasses.hasPopupIcon, \".\").concat(autocompleteClasses.hasClearIcon, \"&\")]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [\"& .\".concat(filledInputClasses.input)]: {\n      padding: '7px 4px'\n    },\n    [\"& .\".concat(autocompleteClasses.endAdornment)]: {\n      right: 9\n    }\n  },\n  [\"& .\".concat(filledInputClasses.root, \".\").concat(inputBaseClasses.sizeSmall)]: {\n    paddingBottom: 1,\n    [\"& .\".concat(filledInputClasses.input)]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [\"& .\".concat(inputBaseClasses.hiddenLabel)]: {\n    paddingTop: 8\n  },\n  [\"& .\".concat(filledInputClasses.root, \".\").concat(inputBaseClasses.hiddenLabel)]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [\"& .\".concat(autocompleteClasses.input)]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [\"& .\".concat(filledInputClasses.root, \".\").concat(inputBaseClasses.hiddenLabel, \".\").concat(inputBaseClasses.sizeSmall)]: {\n    [\"& .\".concat(autocompleteClasses.input)]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [\"& .\".concat(autocompleteClasses.input)]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      fullWidth: true\n    },\n    style: {\n      width: '100%'\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      [\"& .\".concat(autocompleteClasses.tag)]: {\n        margin: 2,\n        maxWidth: 'calc(100% - 4px)'\n      }\n    }\n  }, {\n    props: {\n      inputFocused: true\n    },\n    style: {\n      [\"& .\".concat(autocompleteClasses.input)]: {\n        opacity: 1\n      }\n    }\n  }, {\n    props: {\n      multiple: true\n    },\n    style: {\n      [\"& .\".concat(autocompleteClasses.inputRoot)]: {\n        flexWrap: 'wrap'\n      }\n    }\n  }]\n});\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment'\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: '50%',\n  transform: 'translate(0, -50%)'\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator'\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];\n  }\n})({\n  padding: 2,\n  marginRight: -2,\n  variants: [{\n    props: {\n      popupOpen: true\n    },\n    style: {\n      transform: 'rotate(180deg)'\n    }\n  }]\n});\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [\"& .\".concat(autocompleteClasses.option)]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(memoTheme(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    zIndex: (theme.vars || theme).zIndex.modal,\n    variants: [{\n      props: {\n        disablePortal: true\n      },\n      style: {\n        position: 'absolute'\n      }\n    }]\n  };\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper'\n})(memoTheme(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return _objectSpread(_objectSpread({}, theme.typography.body1), {}, {\n    overflow: 'auto'\n  });\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading'\n})(memoTheme(_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions'\n})(memoTheme(_ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return {\n    color: (theme.vars || theme).palette.text.secondary,\n    padding: '14px 16px'\n  };\n}));\nconst AutocompleteListbox = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox'\n})(memoTheme(_ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto',\n    position: 'relative',\n    [\"& .\".concat(autocompleteClasses.option)]: {\n      minHeight: 48,\n      display: 'flex',\n      overflow: 'hidden',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16,\n      [theme.breakpoints.up('sm')]: {\n        minHeight: 'auto'\n      },\n      [\"&.\".concat(autocompleteClasses.focused)]: {\n        backgroundColor: (theme.vars || theme).palette.action.hover,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      },\n      '&[aria-disabled=\"true\"]': {\n        opacity: (theme.vars || theme).palette.action.disabledOpacity,\n        pointerEvents: 'none'\n      },\n      [\"&.\".concat(autocompleteClasses.focusVisible)]: {\n        backgroundColor: (theme.vars || theme).palette.action.focus\n      },\n      '&[aria-selected=\"true\"]': {\n        backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, (theme.vars || theme).palette.action.selectedOpacity),\n        [\"&.\".concat(autocompleteClasses.focused)]: {\n          backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, \"\".concat((theme.vars || theme).palette.action.selectedOpacity, \" + \").concat((theme.vars || theme).palette.action.hoverOpacity)),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: (theme.vars || theme).palette.action.selected\n          }\n        },\n        [\"&.\".concat(autocompleteClasses.focusVisible)]: {\n          backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, \"\".concat((theme.vars || theme).palette.action.selectedOpacity, \" + \").concat((theme.vars || theme).palette.action.focusOpacity))\n        }\n      }\n    }\n  };\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel'\n})(memoTheme(_ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return {\n    backgroundColor: (theme.vars || theme).palette.background.paper,\n    top: -8\n  };\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl'\n})({\n  padding: 0,\n  [\"& .\".concat(autocompleteClasses.option)]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps: ChipPropsProp,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps,\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterOptions,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => \"+\".concat(more),\n      getOptionDisabled,\n      getOptionKey,\n      getOptionLabel: getOptionLabelProp,\n      isOptionEqualToValue,\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      id: idProp,\n      includeInputInList = false,\n      inputValue: inputValueProp,\n      limitTags = -1,\n      ListboxComponent: ListboxComponentProp,\n      ListboxProps: ListboxPropsProp,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      onChange,\n      onClose,\n      onHighlightChange,\n      onInputChange,\n      onOpen,\n      open,\n      openOnFocus = false,\n      openText = 'Open',\n      options,\n      PaperComponent: PaperComponentProp,\n      PopperComponent: PopperComponentProp,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      renderValue,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slots = {},\n      slotProps = {},\n      value: valueProp\n    } = props,\n    other = _objectWithoutProperties(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getItemProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedItem,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_objectSpread(_objectSpread({}, props), {}, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const _getListboxProps = getListboxProps(),\n    {\n      ref: listboxRef\n    } = _getListboxProps,\n    otherListboxProps = _objectWithoutProperties(_getListboxProps, _excluded2);\n  const defaultGetOptionLabel = option => {\n    var _option$label;\n    return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n  };\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _objectSpread(_objectSpread({}, props), {}, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    getOptionLabel,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedItem === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots: _objectSpread({\n      paper: PaperComponentProp,\n      popper: PopperComponentProp\n    }, slots),\n    slotProps: _objectSpread(_objectSpread({\n      chip: ChipPropsProp,\n      listbox: ListboxPropsProp\n    }, componentsProps), slotProps)\n  };\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\n    elementType: AutocompleteListbox,\n    externalForwardedProps,\n    ownerState,\n    className: classes.listbox,\n    additionalProps: otherListboxProps,\n    ref: listboxRef\n  });\n  const [PaperSlot, paperProps] = useSlot('paper', {\n    elementType: Paper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.paper\n  });\n  const [PopperSlot, popperProps] = useSlot('popper', {\n    elementType: Popper,\n    externalForwardedProps,\n    ownerState,\n    className: classes.popper,\n    additionalProps: {\n      disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      role: 'presentation',\n      anchorEl,\n      open: popupOpen\n    }\n  });\n  let startAdornment;\n  const getCustomizedItemProps = params => _objectSpread({\n    className: classes.tag,\n    disabled\n  }, getItemProps(params));\n  if (multiple) {\n    if (value.length > 0) {\n      if (renderTags) {\n        startAdornment = renderTags(value, getCustomizedItemProps, ownerState);\n      } else if (renderValue) {\n        startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n      } else {\n        startAdornment = value.map((option, index) => {\n          const _getCustomizedItemPro = getCustomizedItemProps({\n              index\n            }),\n            {\n              key\n            } = _getCustomizedItemPro,\n            customItemProps = _objectWithoutProperties(_getCustomizedItemPro, _excluded3);\n          return /*#__PURE__*/_jsx(Chip, _objectSpread(_objectSpread({\n            label: getOptionLabel(option),\n            size: size\n          }, customItemProps), externalForwardedProps.slotProps.chip), key);\n        });\n      }\n    }\n  } else if (renderValue && value != null) {\n    startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => {\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\n    const {\n        key\n      } = props2,\n      otherProps = _objectWithoutProperties(props2, _excluded4);\n    return /*#__PURE__*/_jsx(\"li\", _objectSpread(_objectSpread({}, otherProps), {}, {\n      children: getOptionLabel(option)\n    }), key);\n  };\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_objectSpread(_objectSpread({}, optionProps), {}, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    }, ownerState);\n  };\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _objectSpread(_objectSpread({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other)), {}, {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _objectSpread({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onMouseDown: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          }\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _objectSpread(_objectSpread(_objectSpread({}, getClearProps()), {}, {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps), {}, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps === null || clearIndicatorSlotProps === void 0 ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _objectSpread(_objectSpread(_objectSpread({}, getPopupIndicatorProps()), {}, {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps), {}, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps === null || popupIndicatorSlotProps === void 0 ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _objectSpread({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _objectSpread(_objectSpread({\n      as: PopperSlot\n    }, popperProps), {}, {\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _objectSpread(_objectSpread({\n        as: PaperSlot\n      }, paperProps), {}, {\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(ListboxSlot, _objectSpread(_objectSpread({\n          as: ListboxComponentProp\n        }, listboxProps), {}, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        })) : null]\n      }))\n    })) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\r\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\r\n   * known as the completion string, appears inline after the input cursor in the textbox.\r\n   * The inline completion string is visually highlighted and has a selected state.\r\n   * @default false\r\n   */\n  autoComplete: PropTypes.bool,\n  /**\r\n   * If `true`, the first option is automatically highlighted.\r\n   * @default false\r\n   */\n  autoHighlight: PropTypes.bool,\n  /**\r\n   * If `true`, the selected option becomes the value of the input\r\n   * when the Autocomplete loses focus unless the user chooses\r\n   * a different option or changes the character string in the input.\r\n   *\r\n   * When using the `freeSolo` mode, the typed value will be the input value\r\n   * if the Autocomplete loses focus without highlighting an option.\r\n   * @default false\r\n   */\n  autoSelect: PropTypes.bool,\n  /**\r\n   * Control if the input should be blurred when an option is selected:\r\n   *\r\n   * - `false` the input is not blurred.\r\n   * - `true` the input is always blurred.\r\n   * - `touch` the input is blurred after a touch event.\r\n   * - `mouse` the input is blurred after a mouse event.\r\n   * @default false\r\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\r\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\r\n   * @deprecated Use `slotProps.chip` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  ChipProps: PropTypes.object,\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\n  classes: PropTypes.object,\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * The icon to display in place of the default clear icon.\r\n   * @default <ClearIcon fontSize=\"small\" />\r\n   */\n  clearIcon: PropTypes.node,\n  /**\r\n   * If `true`, the input's text is cleared on blur if no value is selected.\r\n   *\r\n   * Set it to `true` if you want to help the user enter a new value.\r\n   * Set it to `false` if you want to help the user resume their search.\r\n   * @default !props.freeSolo\r\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\r\n   * If `true`, clear all values when the user presses escape and the popup is closed.\r\n   * @default false\r\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Clear'\r\n   */\n  clearText: PropTypes.string,\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Close'\r\n   */\n  closeText: PropTypes.string,\n  /**\r\n   * The props used for each slot inside.\r\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   * @default props.multiple ? [] : null\r\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', \"However, \".concat(props.defaultValue, \" was provided.\")].join('\\n'));\n    }\n    return null;\n  }),\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   * @default false\r\n   */\n  disableClearable: PropTypes.bool,\n  /**\r\n   * If `true`, the popup won't close when a value is selected.\r\n   * @default false\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * If `true`, will allow focus on disabled items.\r\n   * @default false\r\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\r\n   * If `true`, the list box in the popup will not wrap focus.\r\n   * @default false\r\n   */\n  disableListWrap: PropTypes.bool,\n  /**\r\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\n  disablePortal: PropTypes.bool,\n  /**\r\n   * A function that determines the filtered options to be rendered on search.\r\n   *\r\n   * @default createFilterOptions()\r\n   * @param {Value[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {Value[]}\r\n   */\n  filterOptions: PropTypes.func,\n  /**\r\n   * If `true`, hide the selected options from the list box.\r\n   * @default false\r\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   * @default 'auto'\r\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   * @default false\r\n   */\n  freeSolo: PropTypes.bool,\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   * @default false\r\n   */\n  fullWidth: PropTypes.bool,\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   * @default (more) => `+${more}`\r\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @template Value The option shape. Will be the same shape as an item of the options.\r\n   * @returns {boolean}\r\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\r\n   * Used to determine the key for a given option.\r\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\r\n   *\r\n   * @param {Value} option The option to get the key for.\r\n   * @returns {string | number}\r\n   */\n  getOptionKey: PropTypes.func,\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * If used in free solo mode, it must accept both the type of the options and a string.\r\n   *\r\n   * @param {Value} option\r\n   * @returns {string}\r\n   * @default (option) => option.label ?? option\r\n   */\n  getOptionLabel: PropTypes.func,\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {Value} option The Autocomplete option.\r\n   * @returns {string}\r\n   */\n  groupBy: PropTypes.func,\n  /**\r\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\r\n   * It should move focus to the first option and last option, respectively.\r\n   * @default !props.freeSolo\r\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide an id it will fall back to a randomly generated one.\r\n   */\n  id: PropTypes.string,\n  /**\r\n   * If `true`, the highlight can move to the input.\r\n   * @default false\r\n   */\n  includeInputInList: PropTypes.bool,\n  /**\r\n   * The input value.\r\n   */\n  inputValue: PropTypes.string,\n  /**\r\n   * Used to determine if the option represents the given value.\r\n   * Uses strict equality by default.\r\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @param {Value} value The value to test against.\r\n   * @returns {boolean}\r\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   * @default -1\r\n   */\n  limitTags: integerPropType,\n  /**\r\n   * The component used to render the listbox.\r\n   * @default 'ul'\r\n   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\r\n   * Props applied to the Listbox element.\r\n   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  ListboxProps: PropTypes.object,\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Loading…'\r\n   */\n  loadingText: PropTypes.node,\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\n  multiple: PropTypes.bool,\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'No options'\r\n   */\n  noOptionsText: PropTypes.node,\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value|Value[]} value The new value of the component.\r\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\r\n   * @param {string} [details]\r\n   */\n  onChange: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\r\n   */\n  onClose: PropTypes.func,\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"mouse\"`, `\"touch\"`.\r\n   */\n  onHighlightChange: PropTypes.func,\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\r\n   */\n  onInputChange: PropTypes.func,\n  /**\r\n   * @ignore\r\n   */\n  onKeyDown: PropTypes.func,\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n  /**\r\n   * If `true`, the component is shown.\r\n   */\n  open: PropTypes.bool,\n  /**\r\n   * If `true`, the popup will open on input focus.\r\n   * @default false\r\n   */\n  openOnFocus: PropTypes.bool,\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Open'\r\n   */\n  openText: PropTypes.string,\n  /**\r\n   * A list of options that will be shown in the Autocomplete.\r\n   */\n  options: PropTypes.array.isRequired,\n  /**\r\n   * The component used to render the body of the popup.\r\n   * @default Paper\r\n   * @deprecated Use `slots.paper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\r\n   * The component used to position the popup.\r\n   * @default Popper\r\n   * @deprecated Use `slots.popper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   * @default <ArrowDropDownIcon />\r\n   */\n  popupIcon: PropTypes.node,\n  /**\r\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\r\n   * @default false\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {AutocompleteRenderGroupParams} params The group to render.\r\n   * @returns {ReactNode}\r\n   */\n  renderGroup: PropTypes.func,\n  /**\r\n   * Render the input.\r\n   *\r\n   * **Note:** The `renderInput` prop must return a `TextField` component or a compatible custom component\r\n   * that correctly forwards `InputProps.ref` and spreads `inputProps`. This ensures proper integration\r\n   * with the Autocomplete's internal logic (e.g., focus management and keyboard navigation).\r\n   *\r\n   * Avoid using components like `DatePicker` or `Select` directly, as they may not forward the required props,\r\n   * leading to runtime errors or unexpected behavior.\r\n   *\r\n   * @param {object} params\r\n   * @returns {ReactNode}\r\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {object} props The props to apply on the li element.\r\n   * @param {Value} option The option to render.\r\n   * @param {object} state The state of each option.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderOption: PropTypes.func,\n  /**\r\n   * Render the selected value when doing multiple selections.\r\n   *\r\n   * @deprecated Use `renderValue` prop instead\r\n   *\r\n   * @param {Value[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderTags: PropTypes.func,\n  /**\r\n   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\r\n   *\r\n   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\r\n   * @param {function} getItemProps The value item props.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\n  renderValue: PropTypes.func,\n  /**\r\n   * If `true`, the input's text is selected on focus.\r\n   * It helps the user clear the selected value.\r\n   * @default !props.freeSolo\r\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\r\n   * The size of the component.\r\n   * @default 'medium'\r\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\n  slots: PropTypes.shape({\n    listbox: PropTypes.elementType,\n    paper: PropTypes.elementType,\n    popper: PropTypes.elementType\n  }),\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\r\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', \"However, \".concat(props.value, \" was provided.\")].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_objectWithoutProperties","_objectSpread","_excluded","_excluded2","_excluded3","_excluded4","_ClearIcon","_ArrowDropDownIcon","React","PropTypes","clsx","integerPropType","chainPropTypes","composeClasses","useAutocomplete","createFilterOptions","Popper","ListSubheader","Paper","IconButton","Chip","inputClasses","inputBaseClasses","outlinedInputClasses","filledInputClasses","ClearIcon","ArrowDropDownIcon","styled","memoTheme","useDefaultProps","autocompleteClasses","getAutocompleteUtilityClass","capitalize","useSlot","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","disablePortal","expanded","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","slots","root","inputRoot","input","tag","concat","endAdornment","clearIndicator","popupIndicator","popper","paper","listbox","loading","noOptions","option","groupLabel","groupUl","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","margin","maxWidth","paddingRight","width","minWidth","paddingBottom","padding","sizeSmall","right","paddingTop","paddingLeft","hiddenLabel","flexGrow","textOverflow","opacity","variants","style","multiple","flexWrap","AutocompleteEndAdornment","position","top","transform","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","AutocompletePopper","popperDisablePortal","_ref","theme","zIndex","vars","modal","AutocompletePaper","_ref2","typography","body1","overflow","AutocompleteLoading","_ref3","color","palette","text","secondary","AutocompleteNoOptions","_ref4","AutocompleteListbox","_ref5","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","alpha","primary","main","selectedOpacity","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","_ref6","background","AutocompleteGroupUl","Autocomplete","forwardRef","inProps","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","ChipPropsProp","className","clearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionDisabled","getOptionKey","getOptionLabel","getOptionLabelProp","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValue","inputValueProp","limitTags","ListboxComponent","ListboxComponentProp","ListboxProps","ListboxPropsProp","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PaperComponentProp","PopperComponent","PopperComponentProp","popupIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","renderValue","selectOnFocus","slotProps","value","valueProp","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getItemProps","getListboxProps","getOptionProps","dirty","focusedItem","anchorEl","setAnchorEl","groupedOptions","componentName","onMouseDown","handleInputMouseDown","_getListboxProps","listboxRef","otherListboxProps","defaultGetOptionLabel","_option$label","label","externalForwardedProps","chip","ListboxSlot","listboxProps","elementType","additionalProps","PaperSlot","paperProps","PopperSlot","popperProps","clientWidth","role","startAdornment","getCustomizedItemProps","params","length","map","index","_getCustomizedItemPro","key","customItemProps","Array","isArray","splice","push","children","defaultRenderGroup","component","group","defaultRenderOption","props2","otherProps","renderListOption","optionProps","clearIndicatorSlotProps","popupIndicatorSlotProps","Fragment","undefined","InputLabelProps","InputProps","event","target","currentTarget","title","inputProps","as","preventDefault","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","shape","any","Error","join","func","onKeyDown","array","isRequired","sx","arrayOf"],"sources":["C:/achados-perdidos/frontend/node_modules/@mui/material/esm/Autocomplete/Autocomplete.js"],"sourcesContent":["'use client';\r\n\r\nvar _ClearIcon, _ArrowDropDownIcon;\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport integerPropType from '@mui/utils/integerPropType';\r\nimport chainPropTypes from '@mui/utils/chainPropTypes';\r\nimport composeClasses from '@mui/utils/composeClasses';\r\nimport useAutocomplete, { createFilterOptions } from \"../useAutocomplete/index.js\";\r\nimport Popper from \"../Popper/index.js\";\r\nimport ListSubheader from \"../ListSubheader/index.js\";\r\nimport Paper from \"../Paper/index.js\";\r\nimport IconButton from \"../IconButton/index.js\";\r\nimport Chip from \"../Chip/index.js\";\r\nimport inputClasses from \"../Input/inputClasses.js\";\r\nimport inputBaseClasses from \"../InputBase/inputBaseClasses.js\";\r\nimport outlinedInputClasses from \"../OutlinedInput/outlinedInputClasses.js\";\r\nimport filledInputClasses from \"../FilledInput/filledInputClasses.js\";\r\nimport ClearIcon from \"../internal/svg-icons/Close.js\";\r\nimport ArrowDropDownIcon from \"../internal/svg-icons/ArrowDropDown.js\";\r\nimport { styled } from \"../zero-styled/index.js\";\r\nimport memoTheme from \"../utils/memoTheme.js\";\r\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\r\nimport autocompleteClasses, { getAutocompleteUtilityClass } from \"./autocompleteClasses.js\";\r\nimport capitalize from \"../utils/capitalize.js\";\r\nimport useSlot from \"../utils/useSlot.js\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nconst useUtilityClasses = ownerState => {\r\n  const {\r\n    classes,\r\n    disablePortal,\r\n    expanded,\r\n    focused,\r\n    fullWidth,\r\n    hasClearIcon,\r\n    hasPopupIcon,\r\n    inputFocused,\r\n    popupOpen,\r\n    size\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\r\n    inputRoot: ['inputRoot'],\r\n    input: ['input', inputFocused && 'inputFocused'],\r\n    tag: ['tag', `tagSize${capitalize(size)}`],\r\n    endAdornment: ['endAdornment'],\r\n    clearIndicator: ['clearIndicator'],\r\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\r\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\r\n    paper: ['paper'],\r\n    listbox: ['listbox'],\r\n    loading: ['loading'],\r\n    noOptions: ['noOptions'],\r\n    option: ['option'],\r\n    groupLabel: ['groupLabel'],\r\n    groupUl: ['groupUl']\r\n  };\r\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\r\n};\r\nconst AutocompleteRoot = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Root',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    const {\r\n      fullWidth,\r\n      hasClearIcon,\r\n      hasPopupIcon,\r\n      inputFocused,\r\n      size\r\n    } = ownerState;\r\n    return [{\r\n      [`& .${autocompleteClasses.tag}`]: styles.tag\r\n    }, {\r\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\r\n    }, {\r\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\r\n    }, {\r\n      [`& .${autocompleteClasses.input}`]: styles.input\r\n    }, {\r\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\r\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\r\n  }\r\n})({\r\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\r\n    visibility: 'visible'\r\n  },\r\n  /* Avoid double tap issue on iOS */\r\n  '@media (pointer: fine)': {\r\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\r\n      visibility: 'visible'\r\n    }\r\n  },\r\n  [`& .${autocompleteClasses.tag}`]: {\r\n    margin: 3,\r\n    maxWidth: 'calc(100% - 6px)'\r\n  },\r\n  [`& .${autocompleteClasses.inputRoot}`]: {\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4\r\n    },\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      width: 0,\r\n      minWidth: 30\r\n    }\r\n  },\r\n  [`& .${inputClasses.root}`]: {\r\n    paddingBottom: 1,\r\n    '& .MuiInput-input': {\r\n      padding: '4px 4px 4px 0px'\r\n    }\r\n  },\r\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    [`& .${inputClasses.input}`]: {\r\n      padding: '2px 4px 3px 0'\r\n    }\r\n  },\r\n  [`& .${outlinedInputClasses.root}`]: {\r\n    padding: 9,\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4 + 9\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4 + 9\r\n    },\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      padding: '7.5px 4px 7.5px 5px'\r\n    },\r\n    [`& .${autocompleteClasses.endAdornment}`]: {\r\n      right: 9\r\n    }\r\n  },\r\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    // Don't specify paddingRight, as it overrides the default value set when there is only\r\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\r\n    paddingTop: 6,\r\n    paddingBottom: 6,\r\n    paddingLeft: 6,\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      padding: '2.5px 4px 2.5px 8px'\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}`]: {\r\n    paddingTop: 19,\r\n    paddingLeft: 8,\r\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 26 + 4 + 9\r\n    },\r\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\r\n      paddingRight: 52 + 4 + 9\r\n    },\r\n    [`& .${filledInputClasses.input}`]: {\r\n      padding: '7px 4px'\r\n    },\r\n    [`& .${autocompleteClasses.endAdornment}`]: {\r\n      right: 9\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\r\n    paddingBottom: 1,\r\n    [`& .${filledInputClasses.input}`]: {\r\n      padding: '2.5px 4px'\r\n    }\r\n  },\r\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\r\n    paddingTop: 8\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      paddingTop: 16,\r\n      paddingBottom: 17\r\n    }\r\n  },\r\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\r\n    [`& .${autocompleteClasses.input}`]: {\r\n      paddingTop: 8,\r\n      paddingBottom: 9\r\n    }\r\n  },\r\n  [`& .${autocompleteClasses.input}`]: {\r\n    flexGrow: 1,\r\n    textOverflow: 'ellipsis',\r\n    opacity: 0\r\n  },\r\n  variants: [{\r\n    props: {\r\n      fullWidth: true\r\n    },\r\n    style: {\r\n      width: '100%'\r\n    }\r\n  }, {\r\n    props: {\r\n      size: 'small'\r\n    },\r\n    style: {\r\n      [`& .${autocompleteClasses.tag}`]: {\r\n        margin: 2,\r\n        maxWidth: 'calc(100% - 4px)'\r\n      }\r\n    }\r\n  }, {\r\n    props: {\r\n      inputFocused: true\r\n    },\r\n    style: {\r\n      [`& .${autocompleteClasses.input}`]: {\r\n        opacity: 1\r\n      }\r\n    }\r\n  }, {\r\n    props: {\r\n      multiple: true\r\n    },\r\n    style: {\r\n      [`& .${autocompleteClasses.inputRoot}`]: {\r\n        flexWrap: 'wrap'\r\n      }\r\n    }\r\n  }]\r\n});\r\nconst AutocompleteEndAdornment = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'EndAdornment'\r\n})({\r\n  // We use a position absolute to support wrapping tags.\r\n  position: 'absolute',\r\n  right: 0,\r\n  top: '50%',\r\n  transform: 'translate(0, -50%)'\r\n});\r\nconst AutocompleteClearIndicator = styled(IconButton, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'ClearIndicator'\r\n})({\r\n  marginRight: -2,\r\n  padding: 4,\r\n  visibility: 'hidden'\r\n});\r\nconst AutocompletePopupIndicator = styled(IconButton, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'PopupIndicator',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    return [styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen];\r\n  }\r\n})({\r\n  padding: 2,\r\n  marginRight: -2,\r\n  variants: [{\r\n    props: {\r\n      popupOpen: true\r\n    },\r\n    style: {\r\n      transform: 'rotate(180deg)'\r\n    }\r\n  }]\r\n});\r\nconst AutocompletePopper = styled(Popper, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Popper',\r\n  overridesResolver: (props, styles) => {\r\n    const {\r\n      ownerState\r\n    } = props;\r\n    return [{\r\n      [`& .${autocompleteClasses.option}`]: styles.option\r\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\r\n  }\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  zIndex: (theme.vars || theme).zIndex.modal,\r\n  variants: [{\r\n    props: {\r\n      disablePortal: true\r\n    },\r\n    style: {\r\n      position: 'absolute'\r\n    }\r\n  }]\r\n})));\r\nconst AutocompletePaper = styled(Paper, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Paper'\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  ...theme.typography.body1,\r\n  overflow: 'auto'\r\n})));\r\nconst AutocompleteLoading = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Loading'\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  color: (theme.vars || theme).palette.text.secondary,\r\n  padding: '14px 16px'\r\n})));\r\nconst AutocompleteNoOptions = styled('div', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'NoOptions'\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  color: (theme.vars || theme).palette.text.secondary,\r\n  padding: '14px 16px'\r\n})));\r\nconst AutocompleteListbox = styled('ul', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'Listbox'\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  listStyle: 'none',\r\n  margin: 0,\r\n  padding: '8px 0',\r\n  maxHeight: '40vh',\r\n  overflow: 'auto',\r\n  position: 'relative',\r\n  [`& .${autocompleteClasses.option}`]: {\r\n    minHeight: 48,\r\n    display: 'flex',\r\n    overflow: 'hidden',\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n    cursor: 'pointer',\r\n    paddingTop: 6,\r\n    boxSizing: 'border-box',\r\n    outline: '0',\r\n    WebkitTapHighlightColor: 'transparent',\r\n    paddingBottom: 6,\r\n    paddingLeft: 16,\r\n    paddingRight: 16,\r\n    [theme.breakpoints.up('sm')]: {\r\n      minHeight: 'auto'\r\n    },\r\n    [`&.${autocompleteClasses.focused}`]: {\r\n      backgroundColor: (theme.vars || theme).palette.action.hover,\r\n      // Reset on touch devices, it doesn't add specificity\r\n      '@media (hover: none)': {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    },\r\n    '&[aria-disabled=\"true\"]': {\r\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\r\n      pointerEvents: 'none'\r\n    },\r\n    [`&.${autocompleteClasses.focusVisible}`]: {\r\n      backgroundColor: (theme.vars || theme).palette.action.focus\r\n    },\r\n    '&[aria-selected=\"true\"]': {\r\n      backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, (theme.vars || theme).palette.action.selectedOpacity),\r\n      [`&.${autocompleteClasses.focused}`]: {\r\n        backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, `${(theme.vars || theme).palette.action.selectedOpacity} + ${(theme.vars || theme).palette.action.hoverOpacity}`),\r\n        // Reset on touch devices, it doesn't add specificity\r\n        '@media (hover: none)': {\r\n          backgroundColor: (theme.vars || theme).palette.action.selected\r\n        }\r\n      },\r\n      [`&.${autocompleteClasses.focusVisible}`]: {\r\n        backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, `${(theme.vars || theme).palette.action.selectedOpacity} + ${(theme.vars || theme).palette.action.focusOpacity}`)\r\n      }\r\n    }\r\n  }\r\n})));\r\nconst AutocompleteGroupLabel = styled(ListSubheader, {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'GroupLabel'\r\n})(memoTheme(({\r\n  theme\r\n}) => ({\r\n  backgroundColor: (theme.vars || theme).palette.background.paper,\r\n  top: -8\r\n})));\r\nconst AutocompleteGroupUl = styled('ul', {\r\n  name: 'MuiAutocomplete',\r\n  slot: 'GroupUl'\r\n})({\r\n  padding: 0,\r\n  [`& .${autocompleteClasses.option}`]: {\r\n    paddingLeft: 24\r\n  }\r\n});\r\nexport { createFilterOptions };\r\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\r\n  const props = useDefaultProps({\r\n    props: inProps,\r\n    name: 'MuiAutocomplete'\r\n  });\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  const {\r\n    autoComplete = false,\r\n    autoHighlight = false,\r\n    autoSelect = false,\r\n    blurOnSelect = false,\r\n    ChipProps: ChipPropsProp,\r\n    className,\r\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\r\n      fontSize: \"small\"\r\n    })),\r\n    clearOnBlur = !props.freeSolo,\r\n    clearOnEscape = false,\r\n    clearText = 'Clear',\r\n    closeText = 'Close',\r\n    componentsProps,\r\n    defaultValue = props.multiple ? [] : null,\r\n    disableClearable = false,\r\n    disableCloseOnSelect = false,\r\n    disabled = false,\r\n    disabledItemsFocusable = false,\r\n    disableListWrap = false,\r\n    disablePortal = false,\r\n    filterOptions,\r\n    filterSelectedOptions = false,\r\n    forcePopupIcon = 'auto',\r\n    freeSolo = false,\r\n    fullWidth = false,\r\n    getLimitTagsText = more => `+${more}`,\r\n    getOptionDisabled,\r\n    getOptionKey,\r\n    getOptionLabel: getOptionLabelProp,\r\n    isOptionEqualToValue,\r\n    groupBy,\r\n    handleHomeEndKeys = !props.freeSolo,\r\n    id: idProp,\r\n    includeInputInList = false,\r\n    inputValue: inputValueProp,\r\n    limitTags = -1,\r\n    ListboxComponent: ListboxComponentProp,\r\n    ListboxProps: ListboxPropsProp,\r\n    loading = false,\r\n    loadingText = 'Loading…',\r\n    multiple = false,\r\n    noOptionsText = 'No options',\r\n    onChange,\r\n    onClose,\r\n    onHighlightChange,\r\n    onInputChange,\r\n    onOpen,\r\n    open,\r\n    openOnFocus = false,\r\n    openText = 'Open',\r\n    options,\r\n    PaperComponent: PaperComponentProp,\r\n    PopperComponent: PopperComponentProp,\r\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\r\n    readOnly = false,\r\n    renderGroup: renderGroupProp,\r\n    renderInput,\r\n    renderOption: renderOptionProp,\r\n    renderTags,\r\n    renderValue,\r\n    selectOnFocus = !props.freeSolo,\r\n    size = 'medium',\r\n    slots = {},\r\n    slotProps = {},\r\n    value: valueProp,\r\n    ...other\r\n  } = props;\r\n  /* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    getInputLabelProps,\r\n    getPopupIndicatorProps,\r\n    getClearProps,\r\n    getItemProps,\r\n    getListboxProps,\r\n    getOptionProps,\r\n    value,\r\n    dirty,\r\n    expanded,\r\n    id,\r\n    popupOpen,\r\n    focused,\r\n    focusedItem,\r\n    anchorEl,\r\n    setAnchorEl,\r\n    inputValue,\r\n    groupedOptions\r\n  } = useAutocomplete({\r\n    ...props,\r\n    componentName: 'Autocomplete'\r\n  });\r\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\r\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\r\n  const {\r\n    onMouseDown: handleInputMouseDown\r\n  } = getInputProps();\r\n  const {\r\n    ref: listboxRef,\r\n    ...otherListboxProps\r\n  } = getListboxProps();\r\n  const defaultGetOptionLabel = option => option.label ?? option;\r\n  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;\r\n\r\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\r\n  const ownerState = {\r\n    ...props,\r\n    disablePortal,\r\n    expanded,\r\n    focused,\r\n    fullWidth,\r\n    getOptionLabel,\r\n    hasClearIcon,\r\n    hasPopupIcon,\r\n    inputFocused: focusedItem === -1,\r\n    popupOpen,\r\n    size\r\n  };\r\n  const classes = useUtilityClasses(ownerState);\r\n  const externalForwardedProps = {\r\n    slots: {\r\n      paper: PaperComponentProp,\r\n      popper: PopperComponentProp,\r\n      ...slots\r\n    },\r\n    slotProps: {\r\n      chip: ChipPropsProp,\r\n      listbox: ListboxPropsProp,\r\n      ...componentsProps,\r\n      ...slotProps\r\n    }\r\n  };\r\n  const [ListboxSlot, listboxProps] = useSlot('listbox', {\r\n    elementType: AutocompleteListbox,\r\n    externalForwardedProps,\r\n    ownerState,\r\n    className: classes.listbox,\r\n    additionalProps: otherListboxProps,\r\n    ref: listboxRef\r\n  });\r\n  const [PaperSlot, paperProps] = useSlot('paper', {\r\n    elementType: Paper,\r\n    externalForwardedProps,\r\n    ownerState,\r\n    className: classes.paper\r\n  });\r\n  const [PopperSlot, popperProps] = useSlot('popper', {\r\n    elementType: Popper,\r\n    externalForwardedProps,\r\n    ownerState,\r\n    className: classes.popper,\r\n    additionalProps: {\r\n      disablePortal,\r\n      style: {\r\n        width: anchorEl ? anchorEl.clientWidth : null\r\n      },\r\n      role: 'presentation',\r\n      anchorEl,\r\n      open: popupOpen\r\n    }\r\n  });\r\n  let startAdornment;\r\n  const getCustomizedItemProps = params => ({\r\n    className: classes.tag,\r\n    disabled,\r\n    ...getItemProps(params)\r\n  });\r\n  if (multiple) {\r\n    if (value.length > 0) {\r\n      if (renderTags) {\r\n        startAdornment = renderTags(value, getCustomizedItemProps, ownerState);\r\n      } else if (renderValue) {\r\n        startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\r\n      } else {\r\n        startAdornment = value.map((option, index) => {\r\n          const {\r\n            key,\r\n            ...customItemProps\r\n          } = getCustomizedItemProps({\r\n            index\r\n          });\r\n          return /*#__PURE__*/_jsx(Chip, {\r\n            label: getOptionLabel(option),\r\n            size: size,\r\n            ...customItemProps,\r\n            ...externalForwardedProps.slotProps.chip\r\n          }, key);\r\n        });\r\n      }\r\n    }\r\n  } else if (renderValue && value != null) {\r\n    startAdornment = renderValue(value, getCustomizedItemProps, ownerState);\r\n  }\r\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\r\n    const more = startAdornment.length - limitTags;\r\n    if (!focused && more > 0) {\r\n      startAdornment = startAdornment.splice(0, limitTags);\r\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\r\n        className: classes.tag,\r\n        children: getLimitTagsText(more)\r\n      }, startAdornment.length));\r\n    }\r\n  }\r\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\r\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\r\n      className: classes.groupLabel,\r\n      ownerState: ownerState,\r\n      component: \"div\",\r\n      children: params.group\r\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\r\n      className: classes.groupUl,\r\n      ownerState: ownerState,\r\n      children: params.children\r\n    })]\r\n  }, params.key);\r\n  const renderGroup = renderGroupProp || defaultRenderGroup;\r\n  const defaultRenderOption = (props2, option) => {\r\n    // Need to clearly apply key because of https://github.com/vercel/next.js/issues/55642\r\n    const {\r\n      key,\r\n      ...otherProps\r\n    } = props2;\r\n    return /*#__PURE__*/_jsx(\"li\", {\r\n      ...otherProps,\r\n      children: getOptionLabel(option)\r\n    }, key);\r\n  };\r\n  const renderOption = renderOptionProp || defaultRenderOption;\r\n  const renderListOption = (option, index) => {\r\n    const optionProps = getOptionProps({\r\n      option,\r\n      index\r\n    });\r\n    return renderOption({\r\n      ...optionProps,\r\n      className: classes.option\r\n    }, option, {\r\n      selected: optionProps['aria-selected'],\r\n      index,\r\n      inputValue\r\n    }, ownerState);\r\n  };\r\n  const clearIndicatorSlotProps = externalForwardedProps.slotProps.clearIndicator;\r\n  const popupIndicatorSlotProps = externalForwardedProps.slotProps.popupIndicator;\r\n  return /*#__PURE__*/_jsxs(React.Fragment, {\r\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\r\n      ref: ref,\r\n      className: clsx(classes.root, className),\r\n      ownerState: ownerState,\r\n      ...getRootProps(other),\r\n      children: renderInput({\r\n        id,\r\n        disabled,\r\n        fullWidth: true,\r\n        size: size === 'small' ? 'small' : undefined,\r\n        InputLabelProps: getInputLabelProps(),\r\n        InputProps: {\r\n          ref: setAnchorEl,\r\n          className: classes.inputRoot,\r\n          startAdornment,\r\n          onMouseDown: event => {\r\n            if (event.target === event.currentTarget) {\r\n              handleInputMouseDown(event);\r\n            }\r\n          },\r\n          ...((hasClearIcon || hasPopupIcon) && {\r\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\r\n              className: classes.endAdornment,\r\n              ownerState: ownerState,\r\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\r\n                ...getClearProps(),\r\n                \"aria-label\": clearText,\r\n                title: clearText,\r\n                ownerState: ownerState,\r\n                ...clearIndicatorSlotProps,\r\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps?.className),\r\n                children: clearIcon\r\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\r\n                ...getPopupIndicatorProps(),\r\n                disabled: disabled,\r\n                \"aria-label\": popupOpen ? closeText : openText,\r\n                title: popupOpen ? closeText : openText,\r\n                ownerState: ownerState,\r\n                ...popupIndicatorSlotProps,\r\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps?.className),\r\n                children: popupIcon\r\n              }) : null]\r\n            })\r\n          })\r\n        },\r\n        inputProps: {\r\n          className: classes.input,\r\n          disabled,\r\n          readOnly,\r\n          ...getInputProps()\r\n        }\r\n      })\r\n    }), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\r\n      as: PopperSlot,\r\n      ...popperProps,\r\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\r\n        as: PaperSlot,\r\n        ...paperProps,\r\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\r\n          className: classes.loading,\r\n          ownerState: ownerState,\r\n          children: loadingText\r\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\r\n          className: classes.noOptions,\r\n          ownerState: ownerState,\r\n          role: \"presentation\",\r\n          onMouseDown: event => {\r\n            // Prevent input blur when interacting with the \"no options\" content\r\n            event.preventDefault();\r\n          },\r\n          children: noOptionsText\r\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(ListboxSlot, {\r\n          as: ListboxComponentProp,\r\n          ...listboxProps,\r\n          children: groupedOptions.map((option, index) => {\r\n            if (groupBy) {\r\n              return renderGroup({\r\n                key: option.key,\r\n                group: option.group,\r\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\r\n              });\r\n            }\r\n            return renderListOption(option, index);\r\n          })\r\n        }) : null]\r\n      })\r\n    }) : null]\r\n  });\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\r\n   * known as the completion string, appears inline after the input cursor in the textbox.\r\n   * The inline completion string is visually highlighted and has a selected state.\r\n   * @default false\r\n   */\r\n  autoComplete: PropTypes.bool,\r\n  /**\r\n   * If `true`, the first option is automatically highlighted.\r\n   * @default false\r\n   */\r\n  autoHighlight: PropTypes.bool,\r\n  /**\r\n   * If `true`, the selected option becomes the value of the input\r\n   * when the Autocomplete loses focus unless the user chooses\r\n   * a different option or changes the character string in the input.\r\n   *\r\n   * When using the `freeSolo` mode, the typed value will be the input value\r\n   * if the Autocomplete loses focus without highlighting an option.\r\n   * @default false\r\n   */\r\n  autoSelect: PropTypes.bool,\r\n  /**\r\n   * Control if the input should be blurred when an option is selected:\r\n   *\r\n   * - `false` the input is not blurred.\r\n   * - `true` the input is always blurred.\r\n   * - `touch` the input is blurred after a touch event.\r\n   * - `mouse` the input is blurred after a mouse event.\r\n   * @default false\r\n   */\r\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\r\n  /**\r\n   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.\r\n   * @deprecated Use `slotProps.chip` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  ChipProps: PropTypes.object,\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   */\r\n  classes: PropTypes.object,\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n  /**\r\n   * The icon to display in place of the default clear icon.\r\n   * @default <ClearIcon fontSize=\"small\" />\r\n   */\r\n  clearIcon: PropTypes.node,\r\n  /**\r\n   * If `true`, the input's text is cleared on blur if no value is selected.\r\n   *\r\n   * Set it to `true` if you want to help the user enter a new value.\r\n   * Set it to `false` if you want to help the user resume their search.\r\n   * @default !props.freeSolo\r\n   */\r\n  clearOnBlur: PropTypes.bool,\r\n  /**\r\n   * If `true`, clear all values when the user presses escape and the popup is closed.\r\n   * @default false\r\n   */\r\n  clearOnEscape: PropTypes.bool,\r\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Clear'\r\n   */\r\n  clearText: PropTypes.string,\r\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Close'\r\n   */\r\n  closeText: PropTypes.string,\r\n  /**\r\n   * The props used for each slot inside.\r\n   * @deprecated Use the `slotProps` prop instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  componentsProps: PropTypes.shape({\r\n    clearIndicator: PropTypes.object,\r\n    paper: PropTypes.object,\r\n    popper: PropTypes.object,\r\n    popupIndicator: PropTypes.object\r\n  }),\r\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   * @default props.multiple ? [] : null\r\n   */\r\n  defaultValue: chainPropTypes(PropTypes.any, props => {\r\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\r\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\r\n    }\r\n    return null;\r\n  }),\r\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   * @default false\r\n   */\r\n  disableClearable: PropTypes.bool,\r\n  /**\r\n   * If `true`, the popup won't close when a value is selected.\r\n   * @default false\r\n   */\r\n  disableCloseOnSelect: PropTypes.bool,\r\n  /**\r\n   * If `true`, the component is disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n  /**\r\n   * If `true`, will allow focus on disabled items.\r\n   * @default false\r\n   */\r\n  disabledItemsFocusable: PropTypes.bool,\r\n  /**\r\n   * If `true`, the list box in the popup will not wrap focus.\r\n   * @default false\r\n   */\r\n  disableListWrap: PropTypes.bool,\r\n  /**\r\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\r\n   * @default false\r\n   */\r\n  disablePortal: PropTypes.bool,\r\n  /**\r\n   * A function that determines the filtered options to be rendered on search.\r\n   *\r\n   * @default createFilterOptions()\r\n   * @param {Value[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {Value[]}\r\n   */\r\n  filterOptions: PropTypes.func,\r\n  /**\r\n   * If `true`, hide the selected options from the list box.\r\n   * @default false\r\n   */\r\n  filterSelectedOptions: PropTypes.bool,\r\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   * @default 'auto'\r\n   */\r\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\r\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   * @default false\r\n   */\r\n  freeSolo: PropTypes.bool,\r\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   * @default false\r\n   */\r\n  fullWidth: PropTypes.bool,\r\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   * @default (more) => `+${more}`\r\n   */\r\n  getLimitTagsText: PropTypes.func,\r\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @template Value The option shape. Will be the same shape as an item of the options.\r\n   * @returns {boolean}\r\n   */\r\n  getOptionDisabled: PropTypes.func,\r\n  /**\r\n   * Used to determine the key for a given option.\r\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\r\n   *\r\n   * @param {Value} option The option to get the key for.\r\n   * @returns {string | number}\r\n   */\r\n  getOptionKey: PropTypes.func,\r\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * If used in free solo mode, it must accept both the type of the options and a string.\r\n   *\r\n   * @param {Value} option\r\n   * @returns {string}\r\n   * @default (option) => option.label ?? option\r\n   */\r\n  getOptionLabel: PropTypes.func,\r\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {Value} option The Autocomplete option.\r\n   * @returns {string}\r\n   */\r\n  groupBy: PropTypes.func,\r\n  /**\r\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\r\n   * It should move focus to the first option and last option, respectively.\r\n   * @default !props.freeSolo\r\n   */\r\n  handleHomeEndKeys: PropTypes.bool,\r\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide an id it will fall back to a randomly generated one.\r\n   */\r\n  id: PropTypes.string,\r\n  /**\r\n   * If `true`, the highlight can move to the input.\r\n   * @default false\r\n   */\r\n  includeInputInList: PropTypes.bool,\r\n  /**\r\n   * The input value.\r\n   */\r\n  inputValue: PropTypes.string,\r\n  /**\r\n   * Used to determine if the option represents the given value.\r\n   * Uses strict equality by default.\r\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\r\n   *\r\n   * @param {Value} option The option to test.\r\n   * @param {Value} value The value to test against.\r\n   * @returns {boolean}\r\n   */\r\n  isOptionEqualToValue: PropTypes.func,\r\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   * @default -1\r\n   */\r\n  limitTags: integerPropType,\r\n  /**\r\n   * The component used to render the listbox.\r\n   * @default 'ul'\r\n   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  ListboxComponent: PropTypes.elementType,\r\n  /**\r\n   * Props applied to the Listbox element.\r\n   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  ListboxProps: PropTypes.object,\r\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\r\n   * @default false\r\n   */\r\n  loading: PropTypes.bool,\r\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Loading…'\r\n   */\r\n  loadingText: PropTypes.node,\r\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\r\n  multiple: PropTypes.bool,\r\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'No options'\r\n   */\r\n  noOptionsText: PropTypes.node,\r\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value|Value[]} value The new value of the component.\r\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\r\n   * @param {string} [details]\r\n   */\r\n  onChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\r\n   */\r\n  onClose: PropTypes.func,\r\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {Value} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"mouse\"`, `\"touch\"`.\r\n   */\r\n  onHighlightChange: PropTypes.func,\r\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`, `\"blur\"`, `\"selectOption\"`, `\"removeOption\"`\r\n   */\r\n  onInputChange: PropTypes.func,\r\n  /**\r\n   * @ignore\r\n   */\r\n  onKeyDown: PropTypes.func,\r\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {React.SyntheticEvent} event The event source of the callback.\r\n   */\r\n  onOpen: PropTypes.func,\r\n  /**\r\n   * If `true`, the component is shown.\r\n   */\r\n  open: PropTypes.bool,\r\n  /**\r\n   * If `true`, the popup will open on input focus.\r\n   * @default false\r\n   */\r\n  openOnFocus: PropTypes.bool,\r\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).\r\n   * @default 'Open'\r\n   */\r\n  openText: PropTypes.string,\r\n  /**\r\n   * A list of options that will be shown in the Autocomplete.\r\n   */\r\n  options: PropTypes.array.isRequired,\r\n  /**\r\n   * The component used to render the body of the popup.\r\n   * @default Paper\r\n   * @deprecated Use `slots.paper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  PaperComponent: PropTypes.elementType,\r\n  /**\r\n   * The component used to position the popup.\r\n   * @default Popper\r\n   * @deprecated Use `slots.popper` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\r\n   */\r\n  PopperComponent: PropTypes.elementType,\r\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   * @default <ArrowDropDownIcon />\r\n   */\r\n  popupIcon: PropTypes.node,\r\n  /**\r\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\r\n   * @default false\r\n   */\r\n  readOnly: PropTypes.bool,\r\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {AutocompleteRenderGroupParams} params The group to render.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderGroup: PropTypes.func,\r\n  /**\r\n   * Render the input.\r\n   *\r\n   * **Note:** The `renderInput` prop must return a `TextField` component or a compatible custom component\r\n   * that correctly forwards `InputProps.ref` and spreads `inputProps`. This ensures proper integration\r\n   * with the Autocomplete's internal logic (e.g., focus management and keyboard navigation).\r\n   *\r\n   * Avoid using components like `DatePicker` or `Select` directly, as they may not forward the required props,\r\n   * leading to runtime errors or unexpected behavior.\r\n   *\r\n   * @param {object} params\r\n   * @returns {ReactNode}\r\n   */\r\n  renderInput: PropTypes.func.isRequired,\r\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {object} props The props to apply on the li element.\r\n   * @param {Value} option The option to render.\r\n   * @param {object} state The state of each option.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderOption: PropTypes.func,\r\n  /**\r\n   * Render the selected value when doing multiple selections.\r\n   *\r\n   * @deprecated Use `renderValue` prop instead\r\n   *\r\n   * @param {Value[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderTags: PropTypes.func,\r\n  /**\r\n   * Renders the selected value(s) as rich content in the input for both single and multiple selections.\r\n   *\r\n   * @param {AutocompleteRenderValue<Value, Multiple, FreeSolo>} value The `value` provided to the component.\r\n   * @param {function} getItemProps The value item props.\r\n   * @param {object} ownerState The state of the Autocomplete component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderValue: PropTypes.func,\r\n  /**\r\n   * If `true`, the input's text is selected on focus.\r\n   * It helps the user clear the selected value.\r\n   * @default !props.freeSolo\r\n   */\r\n  selectOnFocus: PropTypes.bool,\r\n  /**\r\n   * The size of the component.\r\n   * @default 'medium'\r\n   */\r\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\r\n  /**\r\n   * The props used for each slot inside.\r\n   * @default {}\r\n   */\r\n  slotProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\r\n    chip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    paper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    popper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\r\n  }),\r\n  /**\r\n   * The components used for each slot inside.\r\n   * @default {}\r\n   */\r\n  slots: PropTypes.shape({\r\n    listbox: PropTypes.elementType,\r\n    paper: PropTypes.elementType,\r\n    popper: PropTypes.elementType\r\n  }),\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\r\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\r\n   */\r\n  value: chainPropTypes(PropTypes.any, props => {\r\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\r\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\r\n    }\r\n    return null;\r\n  })\r\n} : void 0;\r\nexport default Autocomplete;"],"mappings":"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AAI;EAChC;AACF;AACA;AACA;EACElI,oBAAoB,EAAErK,SAAS,CAACuS,IAAI;EACpC;AACF;AACA;AACA;EACEjI,QAAQ,EAAEtK,SAAS,CAACuS,IAAI;EACxB;AACF;AACA;AACA;EACEhI,sBAAsB,EAAEvK,SAAS,CAACuS,IAAI;EACtC;AACF;AACA;AACA;EACE/H,eAAe,EAAExK,SAAS,CAACuS,IAAI;EAC/B;AACF;AACA;AACA;EACEvQ,aAAa,EAAEhC,SAAS,CAACuS,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE9H,aAAa,EAAEzK,SAAS,CAACiT,IAAI;EAC7B;AACF;AACA;AACA;EACEvI,qBAAqB,EAAE1K,SAAS,CAACuS,IAAI;EACrC;AACF;AACA;AACA;EACE5H,cAAc,EAAE3K,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACyS,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAEzS,SAAS,CAACuS,IAAI,CAAC,CAAC;EAChF;AACF;AACA;AACA;EACEzI,QAAQ,EAAE9J,SAAS,CAACuS,IAAI;EACxB;AACF;AACA;AACA;EACEpQ,SAAS,EAAEnC,SAAS,CAACuS,IAAI;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;EACE3H,gBAAgB,EAAE5K,SAAS,CAACiT,IAAI;EAChC;AACF;AACA;AACA;AACA;AACA;AACA;EACEnI,iBAAiB,EAAE9K,SAAS,CAACiT,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACElI,YAAY,EAAE/K,SAAS,CAACiT,IAAI;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjI,cAAc,EAAEhL,SAAS,CAACiT,IAAI;EAC9B;AACF;AACA;AACA;AACA;AACA;AACA;EACE9H,OAAO,EAAEnL,SAAS,CAACiT,IAAI;EACvB;AACF;AACA;AACA;AACA;EACE7H,iBAAiB,EAAEpL,SAAS,CAACuS,IAAI;EACjC;AACF;AACA;AACA;EACElH,EAAE,EAAErL,SAAS,CAAC2S,MAAM;EACpB;AACF;AACA;AACA;EACEpH,kBAAkB,EAAEvL,SAAS,CAACuS,IAAI;EAClC;AACF;AACA;EACE/G,UAAU,EAAExL,SAAS,CAAC2S,MAAM;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEzH,oBAAoB,EAAElL,SAAS,CAACiT,IAAI;EACpC;AACF;AACA;AACA;AACA;EACEvH,SAAS,EAAExL,eAAe;EAC1B;AACF;AACA;AACA;AACA;EACEyL,gBAAgB,EAAE3L,SAAS,CAACsP,WAAW;EACvC;AACF;AACA;AACA;EACEzD,YAAY,EAAE7L,SAAS,CAAC0S,MAAM;EAC9B;AACF;AACA;AACA;AACA;EACErP,OAAO,EAAErD,SAAS,CAACuS,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;EACExG,WAAW,EAAE/L,SAAS,CAAC4S,IAAI;EAC3B;AACF;AACA;AACA;EACE1N,QAAQ,EAAElF,SAAS,CAACuS,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACEvG,aAAa,EAAEhM,SAAS,CAAC4S,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3G,QAAQ,EAAEjM,SAAS,CAACiT,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACE/G,OAAO,EAAElM,SAAS,CAACiT,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE9G,iBAAiB,EAAEnM,SAAS,CAACiT,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE7G,aAAa,EAAEpM,SAAS,CAACiT,IAAI;EAC7B;AACF;AACA;EACEC,SAAS,EAAElT,SAAS,CAACiT,IAAI;EACzB;AACF;AACA;AACA;AACA;AACA;EACE5G,MAAM,EAAErM,SAAS,CAACiT,IAAI;EACtB;AACF;AACA;EACE3G,IAAI,EAAEtM,SAAS,CAACuS,IAAI;EACpB;AACF;AACA;AACA;EACEhG,WAAW,EAAEvM,SAAS,CAACuS,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE/F,QAAQ,EAAExM,SAAS,CAAC2S,MAAM;EAC1B;AACF;AACA;EACElG,OAAO,EAAEzM,SAAS,CAACmT,KAAK,CAACC,UAAU;EACnC;AACF;AACA;AACA;AACA;EACE1G,cAAc,EAAE1M,SAAS,CAACsP,WAAW;EACrC;AACF;AACA;AACA;AACA;EACE1C,eAAe,EAAE5M,SAAS,CAACsP,WAAW;EACtC;AACF;AACA;AACA;EACExC,SAAS,EAAE9M,SAAS,CAAC4S,IAAI;EACzB;AACF;AACA;AACA;EACE7F,QAAQ,EAAE/M,SAAS,CAACuS,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACEvF,WAAW,EAAEhN,SAAS,CAACiT,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE/F,WAAW,EAAElN,SAAS,CAACiT,IAAI,CAACG,UAAU;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEjG,YAAY,EAAEnN,SAAS,CAACiT,IAAI;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5F,UAAU,EAAErN,SAAS,CAACiT,IAAI;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE3F,WAAW,EAAEtN,SAAS,CAACiT,IAAI;EAC3B;AACF;AACA;AACA;AACA;EACE1F,aAAa,EAAEvN,SAAS,CAACuS,IAAI;EAC7B;AACF;AACA;AACA;EACE/P,IAAI,EAAExC,SAAS,CAAC,sCAAsCwS,SAAS,CAAC,CAACxS,SAAS,CAACyS,KAAK,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,EAAEzS,SAAS,CAAC2S,MAAM,CAAC,CAAC;EACzH;AACF;AACA;AACA;EACEnF,SAAS,EAAExN,SAAS,CAAC,sCAAsC6S,KAAK,CAAC;IAC/D1D,IAAI,EAAEnP,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;IAC7D1P,cAAc,EAAEhD,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;IACvEtP,OAAO,EAAEpD,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;IAChEvP,KAAK,EAAEnD,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;IAC9DxP,MAAM,EAAElD,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;IAC/DzP,cAAc,EAAEjD,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC;EACxE,CAAC,CAAC;EACF;AACF;AACA;AACA;EACEjQ,KAAK,EAAEzC,SAAS,CAAC6S,KAAK,CAAC;IACrBzP,OAAO,EAAEpD,SAAS,CAACsP,WAAW;IAC9BnM,KAAK,EAAEnD,SAAS,CAACsP,WAAW;IAC5BpM,MAAM,EAAElD,SAAS,CAACsP;EACpB,CAAC,CAAC;EACF;AACF;AACA;EACE+D,EAAE,EAAErT,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACsT,OAAO,CAACtT,SAAS,CAACwS,SAAS,CAAC,CAACxS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,EAAE1S,SAAS,CAACuS,IAAI,CAAC,CAAC,CAAC,EAAEvS,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAAC0S,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;AACA;AACA;EACEjF,KAAK,EAAEtN,cAAc,CAACH,SAAS,CAAC8S,GAAG,EAAEhP,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACoB,QAAQ,IAAIpB,KAAK,CAAC2J,KAAK,KAAK8D,SAAS,IAAI,CAAChB,KAAK,CAACC,OAAO,CAAC1M,KAAK,CAAC2J,KAAK,CAAC,EAAE;MAC9E,OAAO,IAAIsF,KAAK,CAAC,CAAC,oGAAoG,cAAAjQ,MAAA,CAAcgB,KAAK,CAAC2J,KAAK,oBAAiB,CAACuF,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9K;IACA,OAAO,IAAI;EACb,CAAC;AACH,CAAC,GAAG,KAAK,CAAC;AACV,eAAehK,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}